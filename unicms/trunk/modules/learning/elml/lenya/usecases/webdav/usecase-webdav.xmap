<?xml version="1.0"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- $Id$ -->

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

<!-- =========================== Components ================================ -->

  <map:components>

    <map:readers default="resource">
       <map:reader logger="sitemap.reader.requestreader" name="request" pool-max="16" src="org.apache.cocoon.reading.RequestReader"/>
    </map:readers>
  
    <map:serializers default="xml-omitdecl"> 
      <map:serializer name="xml-omitdecl" src="org.apache.cocoon.serialization.XMLSerializer" mime-type="text/xml">
        <encoding>utf-8</encoding>
        <omit-xml-declaration>yes</omit-xml-declaration>
      </map:serializer>
    </map:serializers>

  </map:components>

<!-- ========================== Flowscript ================================= -->

  <map:flow language="javascript">
    <map:script src="webdav.js"/>
  </map:flow>

<!-- ========================== Pipelines ================================== -->

  <map:pipelines>
    
    <map:pipeline type="noncaching">

     <map:match pattern="lesson.jx">
        <map:generate type="jx" src="jx/lesson.jx"/>
        <map:transform src="xslt/removeLenyaMeta.xsl"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="putLesson.jx">
        <map:generate type="jx" src="jx/putLesson.jx"/>
        <map:transform src="xslt/putLesson.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
 
      <map:match pattern="*.jx">
        <map:generate type="jx" src="jx/{1}.jx"/>
        <map:select type="request-method">
          <!-- 207: multi status -->
          <map:when test="PROPFIND">
            <map:serialize type="xml-omitdecl" status-code="207"/>
          </map:when>
          <map:otherwise>
            <map:serialize type="xml-omitdecl" status-code="200"/>
          </map:otherwise>
        </map:select>
      </map:match>

    </map:pipeline> 
<!-- ========================= Private Resources =========================== -->

    <map:pipeline type="noncaching" internal-only="true">
      <!-- PUT request: wrong content-type headers settings of some WebDAV clients (goliath) force us to use a reader for binary _and_ content uploads. -->      
      <map:match pattern="request/generate">
        <map:read type="request"/>
      </map:match>
      
    </map:pipeline>
    
<!-- ========================= Public Resources =========================== -->
    
    <map:pipeline type="noncaching">

      <!-- WebDAV to Lenya URI namespace mapping.  -->

      <map:match pattern="webdav/">
        <map:call function="method">
          <map:parameter name="mapto" value="document"/>
          <map:parameter name="docid" value="/"/>
        </map:call>
      </map:match>

      <map:match pattern="webdav/**/doc-assets">
        <map:call function="method">
          <map:parameter name="mapto" value="assetdir"/>
          <map:parameter name="docid" value="/{1}"/>
        </map:call>
      </map:match>

      <map:match pattern="webdav/**/doc-assets/">
        <map:call function="method">
          <map:parameter name="mapto" value="assetdir"/>
          <map:parameter name="docid" value="/{1}"/>
        </map:call>
      </map:match>

      <map:match pattern="webdav/**/doc-assets/*">
        <map:call function="method">
          <map:parameter name="mapto" value="asset"/>
          <map:parameter name="asset" value="{2}"/>
          <map:parameter name="docid" value="/{1}"/>
        </map:call>
      </map:match>


      <map:match pattern="webdav/**/index_*.xml">
        <map:call function="method">
          <map:parameter name="mapto" value="source"/>
          <map:parameter name="language" value="{2}"/>
          <map:parameter name="docid" value="/{1}"/>
        </map:call>
      </map:match>
     
      <map:match pattern="webdav/**/">
        <map:call function="method">
          <map:parameter name="mapto" value="document"/>
          <map:parameter name="docid" value="/{1}"/> 
        </map:call>
      </map:match>
    
      <map:match pattern="webdav/**">
        <map:call function="method">
          <map:parameter name="mapto" value="document"/>
          <map:parameter name="docid" value="/{1}"/> 
        </map:call>
      </map:match>


      <!-- Methods -->

      <map:match pattern="PROPFIND/lesson">
        <map:call function="propfindLesson"/>
      </map:match>

      <map:match pattern="PROPFIND/**">
        <map:call function="propfind"/>
      </map:match>

       <map:match pattern="GET/lesson">
        <map:call function="getLesson"/>
      </map:match>

      <map:match pattern="GET/**">
        <map:call function="get"/>
      </map:match>

      <map:match pattern="PUT/lesson">
        <map:call function="putLesson" />
      </map:match>

      <map:match pattern="PUT/**">
        <map:call function="put" />
      </map:match>

      <map:match pattern="LOCK/lesson">
        <map:call function="lockLesson"/>
      </map:match>

      <map:match pattern="LOCK/**">
        <map:call function="lock"/>
      </map:match>

      <map:match pattern="UNLOCK/lesson">
        <map:call function="unlockLesson"/>
      </map:match>

      <map:match pattern="UNLOCK/**">
        <map:call function="unlock"/>
      </map:match>
   
      <!-- source requests -->
      <!-- {doctype} {path} -->

      <map:match pattern="xml/**">
        <map:act type="resource-exists" src="context://lenya/pubs/{page-envelope:publication-id}/content/authoring/{1}">
          <map:generate src="context://lenya/pubs/{page-envelope:publication-id}/content/authoring/{../1}"/>
          <map:serialize type="xml"/>
        </map:act>
        <map:generate src="context://lenya/content/util/empty.xml"/> 
        <map:serialize status-code="404"/> 
      </map:match> 

      <map:match pattern="asset/**">
        <map:act type="resource-exists" src="context://lenya/pubs/{page-envelope:publication-id}/resources/authoring/{flow-attribute:docid}/{1}">
          <map:read type="resource" src="context://lenya/pubs/{page-envelope:publication-id}/resources/authoring/{flow-attribute:docid}/{../1}"/>
        </map:act>
        <map:generate src="context://lenya/content/util/empty.xml"/> 
        <map:serialize status-code="404"/> 
      </map:match>
     

      <!-- options -->
 
      <map:match pattern="OPTIONS/**">
        <map:call function="options">
          <map:parameter name="uri" value="{request:requestURI}" />
        </map:call>
      </map:match>
      
    </map:pipeline>
    
    <map:pipeline type="noncaching">
      
     <!-- <map:match pattern="MKCOL/**">
        <map:call function="mkcol" />
      </map:match>
            
      <map:match pattern="DELETE/**">
        <map:call function="remove" />
      </map:match> -->
                        
    </map:pipeline>

  </map:pipelines>

</map:sitemap>
